#define DEBUG true
// colocar pines
#define PINRESET 13
#define PIN_PULSADOR 1
#define BUZZER // PONER PIN
#define PULSADOR A3
#define P_MOTOR_R_IZQ 9
#define P_MOTOR_L_IZQ 10
#define P_MOTOR_R_DER 11
#define P_MOTOR_L_DER 12
#define P_ULTRA_DER_TRIGGER 5
#define P_ULTRA_DER_ECHO 4
#define P_ULTRA_IZQ_TRIGGER 6
#define P_ULTRA_IZQ_ECHO 7
#define DISTANCIA_MAX 30
int VELOCIDAD_DE_GIRO = 130;
int VELOCIDAD_RECONOCER = 130;
#define MINIMO_PISO 200
#define NEGROMAX 400
#define CNYDER A5
#define CNYIZQ A4
int VELOCIDAD_ATAQUE = 100; // regular
int VELOCIDAD_SEGUIMIENTO = 145;
////////////////////////////////////
bool giroIzquierda;
bool giroDerecha;
///////////////////////////
int  velocidadSeguidor = 230;

///////////////////////////////////////////////////////////////
String menu = "menu";
String control = "control remoto";
String despejar = "despeja objetos";
String corredor = "seguidor de linea";
enum STATES
{
    INICIO,
    CONTROL,
    DESPEJAR,
    CORREDOR
};
int estadoJugada = INICIO;

////////////////////////////////////////////////

int distanciaDer;
int distanciaIzq;
unsigned long tiempo;
int periodo = 2000;
bool ultraLogicDer = false;
bool ultraLogicIzq = false;
int pisoDer;
int pisoIzq;

////////////pwm motor
int canalDerL = 0;
int canalDerR = 1;
int canalIzql = 2;
int canalIzqR = 3;

int frecuencia = 5000;

int resolucion = 8;
/////////////////////////////////////////////

/////////////////////////////////////////////////
class MotoresPwm
{
private:
    int _p_r_izq, _p_l_izq, _p_r_der, _p_l_der, _canalDerL, _canalDerR, _canalIzql, _canalIzqR;
    int _frecuencia, _resolucion;

public:
    MotoresPwm(int pr_izq, int pl_izq, int pr_der, int pl_der, int canalDerL, int canalDerR, int canalIzql, int canalIzqR, int frecuencia, int resolucion)
    {
        _p_r_izq = pr_izq;
        _p_l_izq = pl_izq;
        _p_r_der = pr_der;
        _p_l_der = pl_der;
        _canalDerL = canalDerL;
        _canalDerR = canalDerR;
        _canalIzql = canalIzql;
        _canalIzqR = canalIzqR;
        _frecuencia = frecuencia;
        _resolucion = resolucion;

        ledcSetup(_canalDerL, _frecuencia, _resolucion);
        ledcSetup(_canalDerR, _frecuencia, _resolucion);
        ledcSetup(_canalIzql, _frecuencia, _resolucion);
        ledcSetup(_canalIzqR, _frecuencia, _resolucion);

        ledcAttachPin(_p_r_izq, _canalIzqR);
        ledcAttachPin(_p_l_izq, _canalIzql);
        ledcAttachPin(_p_r_der, _canalDerR);
        ledcAttachPin(_p_l_der, _canalDerL);
    }
    void avanzar(int velocidad)
    {

        ledcWrite(_canalIzqR, LOW);
        ledcWrite(_canalIzql, velocidad);

        ledcWrite(_canalDerR, LOW);
        ledcWrite(_canalDerL, velocidad);
    }
    void retroceder(int velocidad)
    {
        ledcWrite(_canalIzqR, velocidad);
        ledcWrite(_canalIzql, LOW);

        ledcWrite(_canalDerR, velocidad);
        ledcWrite(_canalDerL, LOW);
    }
    void frenar()
    {
        ledcWrite(_canalIzqR, LOW);
        ledcWrite(_canalIzql, LOW);

        ledcWrite(_canalDerR, LOW);
        ledcWrite(_canalDerL, LOW);
    }
    void giro_izquierda(int velocidad)
    {
        ledcWrite(_canalIzqR, velocidad);
        ledcWrite(_canalIzql, LOW);

        ledcWrite(_canalDerR, LOW);
        ledcWrite(_canalDerL, velocidad);
    }
    void giro_derecha(int velocidad)
    {
        ledcWrite(_canalIzqR, LOW);
        ledcWrite(_canalIzql, velocidad);

        ledcWrite(_canalDerR, velocidad);
        ledcWrite(_canalDerL, LOW);
    }
    void RotarIzq(int velocidad){
        
        ledcWrite(_canalIzqR, LOW);
        ledcWrite(_canalIzql, velocidad - 20 );

        ledcWrite(_canalDerR, LOW);
        ledcWrite(_canalDerL, velocidad );
    }
    void RotarDer(int velocidad){
        
        ledcWrite(_canalIzqR, LOW);
        ledcWrite(_canalIzql, velocidad  );

        ledcWrite(_canalDerR, LOW);
        ledcWrite(_canalDerL, velocidad - 20);
    }
    void RetrocerGiroIzq(int velocidad){
        ledcWrite(_canalIzqR, velocidad);
        ledcWrite(_canalIzql, LOW);

        ledcWrite(_canalDerR, velocidad - 20);
        ledcWrite(_canalDerL, LOW);

    }
};
//////////////////////////////////////////////////////////////////
class Cny70
{
private:
    int _pin, _receptor;

public:
    Cny70(int pin)
    {
        _pin = pin;
    }

    int GetValor()
    {
        return _receptor = analogRead(_pin);
    }
};


////////////////////////////////////////////////////////////////////////
MotoresPwm *motor = new MotoresPwm(P_MOTOR_R_IZQ, P_MOTOR_L_IZQ, P_MOTOR_R_DER, P_MOTOR_L_DER, canalDerL, canalDerR, canalIzql, canalIzqR, frecuencia, resolucion); // poner pines de los motores como estan en la libreria

Cny70 *cnyDer = new Cny70(CNYDER);
Cny70 *cnyIzq = new Cny70(CNYIZQ);


/////////////////////////////////////funciones quita objetos ////////////////////
//////////////////////////////////////////////seguidor de linea//////////////
// llamar  a sensores
void seguir()
{
    pisoDer = cnyDer->GetValor();
    pisoIzq = cnyIzq->GetValor();
    bool atras = (NEGROMAX < pisoDer) || (NEGROMAX < pisoIzq);
    if(NEGROMAX < pisoDer){
        motor->RotarIzq(velocidadSeguidor);
    }
    if(NEGROMAX < pisoIzq){
        motor->RotarDer(velocidadSeguidor);
    }
    if(atras){
        motor->RetrocerGiroIzq(velocidadSeguidor);
    }
    else motor->avanzar(velocidadSeguidor);
}
/////////////////////////////////////
void setup(){

}

///////////////////////////////////////////////////////////////////
void loop()
{
    seguir();
}
