#define DEBUG true
// colocar pines

#define P_MOTOR_R_IZQ 9
#define P_MOTOR_L_IZQ 10
#define P_MOTOR_R_DER 11
#define P_MOTOR_L_DER 12
#define P_ULTRA_DER_TRIGGER 5
#define P_ULTRA_DER_ECHO 4
#define P_ULTRA_IZQ_TRIGGER 6
#define P_ULTRA_IZQ_ECHO 7
#define DISTANCIA_MAX 30
int VELOCIDAD_DE_GIRO = 130;
int VELOCIDAD_RECONOCER = 130;
#define MINIMO_PISO 200
#define CNYDER A5
#define CNYIZQ A4
int VELOCIDAD_ATAQUE = 100; // regular
int VELOCIDAD_SEGUIMIENTO = 145;

int distanciaDer;
int distanciaIzq;
unsigned long tiempo;
int periodo = 2000;
bool ultraLogicDer = false;
bool ultraLogicIzq = false;

////////////pwm motor
int canalDerL = 0;
int canalDerR = 1;
int canalIzql = 2;
int canalIzqR = 3;

int frecuencia = 5000;

int resolucion = 8;

class MotoresPwm
{
private:
    int _p_r_izq, _p_l_izq, _p_r_der, _p_l_der, _canalDerL, _canalDerR, _canalIzql, _canalIzqR;
    int _frecuencia,_resolucion;
public:
    MotoresPwm(int pr_izq, int pl_izq, int pr_der, int pl_der, int canalDerL, int canalDerR, int canalIzql, int canalIzqR, int frecuencia, int resolucion)
    {
        _p_r_izq = pr_izq;
        _p_l_izq = pl_izq;
        _p_r_der = pr_der;
        _p_l_der = pl_der;
        _canalDerL = canalDerL;
        _canalDerR = canalDerR;
        _canalIzql = canalIzql;
        _canalIzqR = canalIzqR;
        _frecuencia = frecuencia;
        _resolucion = resolucion;


        ledcSetup(_canalDerL,_frecuencia,_resolucion);
        ledcSetup(_canalDerR,_frecuencia,_resolucion);
        ledcSetup(_canalIzql,_frecuencia,_resolucion);
        ledcSetup(_canalIzqR,_frecuencia,_resolucion);

        ledcAttachPin(_p_r_izq,_canalIzqR);
        ledcAttachPin(_p_l_izq,_canalIzql);
        ledcAttachPin(_p_r_der,_canalDerR);
        ledcAttachPin(_p_l_der,_canalDerL);
    }
    void avanzar(int velocidad)
    {
       
        ledcWrite(_canalIzqR, LOW);
        ledcWrite(_canalIzql,velocidad);

        ledcWrite(_canalDerR, LOW);
        ledcWrite(_canalDerL, velocidad);
    }
    void retroceder(int velocidad)
    {
       ledcWrite(_canalIzqR, velocidad);
        ledcWrite(_canalIzql, LOW);

        ledcWrite(_canalDerR, velocidad);
        ledcWrite(_canalDerL, LOW);
    }
    void frenar()
    {
        ledcWrite(_canalIzqR, LOW);
        ledcWrite(_canalIzql, LOW);

        ledcWrite(_canalDerR, LOW);
        ledcWrite(_canalDerL, LOW);
    }
    void giro_izquierda(int velocidad)
    {
        ledcWrite(_canalIzqR, velocidad);
        ledcWrite(_canalIzql, LOW);

        ledcWrite(_canalDerR, LOW);
        ledcWrite(_canalDerL, velocidad);
    }
    void giro_derecha(int velocidad)
    {
         ledcWrite(_canalIzqR, LOW);
        ledcWrite(_canalIzql, velocidad);

        ledcWrite(_canalDerR, velocidad);
        ledcWrite(_canalDerL, LOW);
    }
};

class UltraSonido
{
private:
    int _trigger;
    int _echo;
    int _distancia;
    unsigned long _tiempo;

public:
    UltraSonido(int trigger, int echo)
    {
        _trigger = trigger;
        _echo = echo;
        pinMode(_trigger, OUTPUT);
        pinMode(_echo, INPUT);
        digitalWrite(_trigger, LOW);
    }
    int GetDistancia()
    {
        digitalWrite(_trigger, HIGH);
        delayMicroseconds(10);
        digitalWrite(_trigger, LOW);
        _tiempo = pulseIn(_echo, HIGH);
        _distancia = _tiempo / 59;
        return _distancia;
    }
};

MotoresPwm *motor = new MotoresPwm(P_MOTOR_R_IZQ, P_MOTOR_L_IZQ, P_MOTOR_R_DER, P_MOTOR_L_DER,canalDerL,canalDerR,canalIzql,canalIzqR,frecuencia,resolucion); // poner pines de los motores como estan en la libreria
UltraSonido *ultraSDer = new UltraSonido(P_ULTRA_DER_TRIGGER, P_ULTRA_DER_ECHO);
UltraSonido *ultraSIzq = new UltraSonido(P_ULTRA_IZQ_TRIGGER, P_ULTRA_IZQ_ECHO);

void Adelante(int velocidadAdelante, int velocidadReintegro)
{
    motor->avanzar(velocidadAdelante);
}

// giramos y en caso de no encontrar nada avanzamos
void Reconocer()
{
    motor->giro_izquierda(VELOCIDAD_DE_GIRO); // meter velocidad de giro
    if (millis() < tiempo + periodo)
    {
        tiempo = millis();
        Adelante(VELOCIDAD_RECONOCER, VELOCIDAD_DE_GIRO);
    }
}

void sensores()
{
    distanciaDer = ultraSDer->GetDistancia();
    distanciaIzq = ultraSIzq->GetDistancia();
    ultraLogicIzq = (distanciaIzq < DISTANCIA_MAX);
    ultraLogicDer = (distanciaDer < DISTANCIA_MAX);
}

void Busquedad()
{
    bool atacar = (ultraLogicIzq && ultraLogicDer);
    bool izquierda = (ultraLogicIzq);
    bool derecha = (ultraLogicDer);

    if (atacar)
        Adelante(VELOCIDAD_ATAQUE, VELOCIDAD_DE_GIRO);
    else if (izquierda)
        motor->giro_izquierda(VELOCIDAD_SEGUIMIENTO);
    else if (derecha)
        motor->giro_derecha(VELOCIDAD_SEGUIMIENTO);
    else
        Reconocer();
}

void setup()
{
    if (DEBUG)
        Serial.begin(9600);
}

void loop()
{
    sensores();
    Busquedad();
}
